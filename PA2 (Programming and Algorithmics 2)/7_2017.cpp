#ifndef __PROGTEST__

#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <cmath>
#include <cassert>
#include <typeinfo>
#include <unistd.h>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <vector>
#include <list>
#include <string>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <functional>
#include <memory>
#include <algorithm>
#include <type_traits>

using namespace std;
//=====================================================================================================================
class CRect 
{
  public:
    //-------------------------------------------------------------------------------------------------------
                              CRect                         ( double            x,
                                                              double            y,
                                                              double            w,
                                                              double            h )
                              : m_X ( x ),
                                m_Y ( y ),
                                m_W ( w ),
                                m_H ( h )
    {
    }
    //-------------------------------------------------------------------------------------------------------
    friend ostream          & operator <<                   ( ostream         & os,
                                                              const CRect     & x )
    {
      return os << '(' << x . m_X << ',' << x . m_Y << ',' << x . m_W << ',' << x . m_H << ')';
    }
    //-------------------------------------------------------------------------------------------------------
    double                    m_X;
    double                    m_Y;
    double                    m_W;
    double                    m_H;
};
#endif /* __PROGTEST__ */
//=====================================================================================================================
class CElement;
class CWindow;
class CPanel;
class CButton;
class CInput;
class CLabel;
class CComboBox;
//=====================================================================================================================
class CElement
{
  public:
    //-------------------------------------------------------------------------------------------------------
                              CElement                      ( void );
    //-------------------------------------------------------------------------------------------------------
                              CElement                      ( int               id,
                                                              const string    & title,
                                                              const CRect     & koef );
    //-------------------------------------------------------------------------------------------------------
    virtual                  ~CElement                      ( void );
    //-------------------------------------------------------------------------------------------------------
    virtual CElement        * clone                         ( void )                            const = 0;
    //-------------------------------------------------------------------------------------------------------
    virtual string            printElement                  ( string            prefix )        const = 0;
    //-------------------------------------------------------------------------------------------------------
    virtual CElement        * Search                        ( int               id )            const = 0;
    //-------------------------------------------------------------------------------------------------------
    virtual void              SetPosition                   ( const CRect     & newPos )              = 0;
    //-------------------------------------------------------------------------------------------------------
    virtual CRect             getKoef                       ( void )                            const = 0;
    //-------------------------------------------------------------------------------------------------------
    int                       getId                         ( void )                            const;
    //-------------------------------------------------------------------------------------------------------
    string                    getTitle                      ( void )                            const;
    //-------------------------------------------------------------------------------------------------------
    CRect                     getPos                        ( void )                            const;
    //-------------------------------------------------------------------------------------------------------
    void                      setPos                        ( const CRect     & pos );
    //-------------------------------------------------------------------------------------------------------
    friend ostream          & operator <<                   ( ostream         & os, 
                                                              const CElement  & element );
    //-------------------------------------------------------------------------------------------------------
    
  protected:
    //-------------------------------------------------------------------------------------------------------    
    CRect                     getNewPos                     ( const CRect     & first,
                                                              const CRect     & second )        const;
    //-------------------------------------------------------------------------------------------------------
    int                       m_id;
    string                    m_title;
    CRect                     m_pos;
};
//---------------------------------------------------------------------------------------------------------------------
                              CElement::CElement            ( void )
                              : m_pos  ( CRect(0,0,0,0) )
{
}
//---------------------------------------------------------------------------------------------------------------------
                              CElement::CElement            ( int               id,
                                                              const string    & title,
                                                              const CRect     & koef )

                              : m_id    ( id    ),
                                m_title ( title ),
                                m_pos   ( koef  )
{  
}
//---------------------------------------------------------------------------------------------------------------------
                              CElement::~CElement           ( void )
{
}
//---------------------------------------------------------------------------------------------------------------------
int                           CElement::getId               ( void )                            const
{
  return m_id;
}
//---------------------------------------------------------------------------------------------------------------------
string                        CElement::getTitle            ( void )                            const
{
  return m_title;
}
//---------------------------------------------------------------------------------------------------------------------
CRect                         CElement::getPos              ( void )                            const
{
  return m_pos;
}
//---------------------------------------------------------------------------------------------------------------------
void                          CElement::setPos              ( const CRect     & pos )
{
  m_pos = pos;
}
//---------------------------------------------------------------------------------------------------------------------      
CRect                         CElement::getNewPos           ( const CRect     & first,
                                                              const CRect     & second )        const
{
  double f_X = first.m_W * second.m_X + first.m_X;
  double f_Y = first.m_H * second.m_Y + first.m_Y;
  double f_W = first.m_W * second.m_W;
  double f_H = first.m_H * second.m_H;

  return CRect(f_X, f_Y, f_W, f_H);
}
//---------------------------------------------------------------------------------------------------------------------
ostream                     & operator <<                   ( ostream         & os, 
                                                              const CElement  & element )
{
  os << element.printElement("");

  return os;
}
//=====================================================================================================================
class CWindow : public CElement
{
  public:
    //-------------------------------------------------------------------------------------------------------
                              CWindow                       ( void );
    //-------------------------------------------------------------------------------------------------------
                              CWindow                       ( const string    & title,
                                                              const CRect     & absPos );
    //-------------------------------------------------------------------------------------------------------
                              CWindow                       ( const CWindow   & element );
    //-------------------------------------------------------------------------------------------------------
                             ~CWindow                       ( void );
    //-------------------------------------------------------------------------------------------------------
    CWindow                 & Add                           ( const CElement  & element ); 
    //-------------------------------------------------------------------------------------------------------
    void                      SetPosition                   ( const CRect     & newPos );
    //-------------------------------------------------------------------------------------------------------
    CElement                * Search                        ( int               id )            const;
    //-------------------------------------------------------------------------------------------------------
    CRect                     getKoef                       ( void )                            const;
    //-------------------------------------------------------------------------------------------------------
    CWindow                 * clone                         ( void )                            const;
    //-------------------------------------------------------------------------------------------------------
    string                    printElement                  ( string            prefix )        const;
    //-------------------------------------------------------------------------------------------------------
    vector<CElement*>         getListElement                ( void )                            const;
    //-------------------------------------------------------------------------------------------------------
    CWindow                 & operator =                    ( const CWindow   & element );
    //-------------------------------------------------------------------------------------------------------

  private:
    //-------------------------------------------------------------------------------------------------------
    vector<CElement*>         m_vector_element;
};
//---------------------------------------------------------------------------------------------------------------------
                              CWindow::CWindow              ( void )
                              : CElement ( )
{
}
//---------------------------------------------------------------------------------------------------------------------
                              CWindow::CWindow              ( const string    & title,
                                                              const CRect     & absPos )

                              : CElement ( 0, title, absPos )
{
}
//---------------------------------------------------------------------------------------------------------------------
                              CWindow::CWindow              ( const CWindow   & element )

                              : CElement ( element.getId(), element.getTitle(), element.getPos() )
{
  for (auto i : element.getListElement())
    m_vector_element.push_back(i->clone());
}
//---------------------------------------------------------------------------------------------------------------------
                              CWindow::~CWindow             ( void )
{
  for(auto i: m_vector_element)
    delete i;
}
//---------------------------------------------------------------------------------------------------------------------
CWindow                     & CWindow::Add                  ( const CElement  & element )
{
  m_vector_element.push_back(element.clone());
  this->SetPosition(this->getPos());

  return *this;
}  
//---------------------------------------------------------------------------------------------------------------------
void                          CWindow::SetPosition          ( const CRect     & newPos )
{
  m_pos = newPos;

  for (auto i : m_vector_element)
    i->SetPosition(getNewPos(m_pos, i->getKoef()));
}
//---------------------------------------------------------------------------------------------------------------------
CElement                    * CWindow::Search               ( int               id )            const
{
  CElement* element = nullptr;

  for (auto i : m_vector_element) {

    if (i->getId() == id)
      return i;

    element = i->Search(id);

    if (element != nullptr)
      return element;
  }

  return element;
}
//---------------------------------------------------------------------------------------------------------------------
CRect                         CWindow::getKoef              ( void )                            const
{
  return getPos();
}
//---------------------------------------------------------------------------------------------------------------------
CWindow                     * CWindow::clone                ( void )                            const
{
  return new CWindow(*this);
}       
//---------------------------------------------------------------------------------------------------------------------      
CWindow                     & CWindow::operator =           ( const CWindow   & element )       
{
  for (auto i : m_vector_element)
    delete i;
  m_vector_element.clear();

  m_pos = element.getPos();
  m_title = element.getTitle();

  for (auto i : element.getListElement())
    m_vector_element.push_back(i->clone());

  return *this;
}
//---------------------------------------------------------------------------------------------------------------------      
vector<CElement*>             CWindow::getListElement       ( void )                            const
{
  return m_vector_element;
}
//---------------------------------------------------------------------------------------------------------------------      
string                        CWindow::printElement         ( string            prefix )        const
{
  ostringstream oss;

  oss << "Window \"" << m_title << "\" " << m_pos << '\n';

  for (unsigned i = 0; i < m_vector_element.size(); i++) {
    if (i == m_vector_element.size() - 1)
      oss << prefix << "+- " << m_vector_element[i]->printElement(prefix + "   ");
    else
      oss << prefix << "+- " << m_vector_element[i]->printElement(prefix + "|  ");
  }

  return oss.str();
}                        
//=====================================================================================================================
class CPanel  : public CElement 
{
  public:
    //-------------------------------------------------------------------------------------------------------
                              CPanel                        ( int               id,
                                                              const CRect     & relPos );
    //-------------------------------------------------------------------------------------------------------
                              CPanel                        ( const CPanel    & element );
    //-------------------------------------------------------------------------------------------------------
                             ~CPanel                        ( void );
    //-------------------------------------------------------------------------------------------------------
    CPanel                  & Add                           ( const CElement  & element ); 
    //-------------------------------------------------------------------------------------------------------
    void                      SetPosition                   ( const CRect     & newPos );
    //-------------------------------------------------------------------------------------------------------
    CElement                * Search                        ( int               id )            const;
    //-------------------------------------------------------------------------------------------------------
    CRect                     getKoef                       ( void )                            const;
    //-------------------------------------------------------------------------------------------------------
    CPanel                  * clone                         ( void )                            const;
    //-------------------------------------------------------------------------------------------------------
    string                    printElement                  ( string            prefix )        const;
    //-------------------------------------------------------------------------------------------------------
    vector<CElement*>         getListElement                ( void )                            const;
    //-------------------------------------------------------------------------------------------------------
    CPanel                  & operator =                    ( const CPanel    & element );
    //-------------------------------------------------------------------------------------------------------
  
  private:
    //-------------------------------------------------------------------------------------------------------
    CRect                     m_koef;
    vector<CElement*>         m_vector_element;
};
//---------------------------------------------------------------------------------------------------------------------
                              CPanel::CPanel                ( int               id,
                                                              const CRect     & relPos )
                              : CElement ( id, "Panel", relPos ),
                                m_koef   ( relPos )
{
}
//---------------------------------------------------------------------------------------------------------------------
                              CPanel::CPanel                ( const CPanel    & element )

                              : CElement ( element.getId(), element.getTitle(), element.getPos() ),
                                m_koef   ( element.getKoef() )
{
  for (auto i : element.getListElement())
    m_vector_element.push_back(i->clone());
}
//---------------------------------------------------------------------------------------------------------------------
                              CPanel::~CPanel             ( void )
{
  for (auto i : m_vector_element)
    delete i;
}
//---------------------------------------------------------------------------------------------------------------------
CPanel                      & CPanel::Add                   ( const CElement  & element )
{
  m_vector_element.push_back(element.clone());
  this->SetPosition(this->getPos());

  return *this;
}
//---------------------------------------------------------------------------------------------------------------------
CElement                    * CPanel::Search                ( int               id )            const
{
  CElement* element = nullptr;

  for (auto i : m_vector_element) {

    if (i->getId() == id)
      return i;

    element = i->Search(id);

    if (element != nullptr)
      return element;
  }

  return element;
}
//---------------------------------------------------------------------------------------------------------------------
CRect                         CPanel::getKoef               ( void )                            const
{
  return m_koef;
}
//---------------------------------------------------------------------------------------------------------------------
CPanel                      * CPanel::clone                 ( void )                            const
{
  return new CPanel(*this);
}       
//---------------------------------------------------------------------------------------------------------------------      
CPanel                      & CPanel::operator =            ( const CPanel    & element )       
{
  for (auto i : m_vector_element)
    delete i;
  m_vector_element.clear();

  m_pos = element.getPos();
  m_title = element.getTitle();

  for (auto i : element.getListElement())
    m_vector_element.push_back(i->clone());

  return *this;
}      
//---------------------------------------------------------------------------------------------------------------------
void                          CPanel::SetPosition           ( const CRect     & newPos )
{
  m_pos = newPos;

  for (auto i : m_vector_element)
    i->SetPosition(getNewPos(m_pos, i->getKoef()));
}
//---------------------------------------------------------------------------------------------------------------------      
vector<CElement*>             CPanel::getListElement        ( void )                            const
{
  return m_vector_element;
}
//---------------------------------------------------------------------------------------------------------------------
string                        CPanel::printElement          ( string            prefix )        const
{
  ostringstream oss;

  oss << "[" << m_id << "] " << m_title << ' ' << m_pos << '\n';

  for (unsigned i = 0; i < m_vector_element.size(); i++) {
    if (i == m_vector_element.size() - 1)
      oss << prefix << "+- " << m_vector_element[i]->printElement(prefix + "   ");
    else
      oss << prefix << "+- " << m_vector_element[i]->printElement(prefix + "|  ");
  }

  return oss.str();
}
//=====================================================================================================================
class CButton : public CElement
{
  public:
    //-------------------------------------------------------------------------------------------------------
                              CButton                       ( int               id,
                                                              const CRect     & relPos,
                                                              const string    & name );
    //-------------------------------------------------------------------------------------------------------
    CElement                * Search                        ( int               id )            const;
    //-------------------------------------------------------------------------------------------------------
    void                      SetPosition                   ( const CRect     & newPos );
    //-------------------------------------------------------------------------------------------------------
    CButton                 * clone                         ( void )                            const;
    //-------------------------------------------------------------------------------------------------------
    string                    printElement                  ( string            prefix )        const;
    //-------------------------------------------------------------------------------------------------------
    CRect                     getKoef                       ( void )                            const;
    //-------------------------------------------------------------------------------------------------------

  private:
    //-------------------------------------------------------------------------------------------------------
    CRect                     m_koef;
};
//---------------------------------------------------------------------------------------------------------------------
                              CButton::CButton              ( int               id,
                                                              const CRect     & relPos,
                                                              const string    & name )
                        
                              : CElement ( id, name, relPos ),
                                m_koef   ( relPos )
{
}
//---------------------------------------------------------------------------------------------------------------------
CElement                    * CButton::Search               ( int               id )            const
{
  return nullptr;
}
//---------------------------------------------------------------------------------------------------------------------
void                          CButton::SetPosition          ( const CRect     & newPos )
{
   m_pos = newPos;
}
//---------------------------------------------------------------------------------------------------------------------
CRect                         CButton::getKoef              ( void )                            const
{
  return m_koef;
}
//---------------------------------------------------------------------------------------------------------------------
CButton                     * CButton::clone                ( void )                            const
{
  return new CButton(*this);
} 
//---------------------------------------------------------------------------------------------------------------------      
string                        CButton::printElement         ( string            prefix )        const
{
  ostringstream oss;

  oss << "[" << m_id << "] Button \"" << m_title << "\" " << m_pos << '\n';

  return oss.str();
} 
//=====================================================================================================================
class CInput : public CElement
{
  public:
    //-------------------------------------------------------------------------------------------------------
                              CInput                        ( int               id,
                                                              const CRect     & relPos,
                                                              const string    & value );
    //-------------------------------------------------------------------------------------------------------
    void                      SetValue                      ( const string    & value );
    //-------------------------------------------------------------------------------------------------------
    string                    GetValue                      ( void );
    //-------------------------------------------------------------------------------------------------------
    CElement                * Search                        ( int               id )            const;
    //-------------------------------------------------------------------------------------------------------
    void                      SetPosition                   ( const CRect     & newPos ); 
    //-------------------------------------------------------------------------------------------------------
    CRect                     getKoef                       ( void )                            const;
    //-------------------------------------------------------------------------------------------------------
    CInput                  * clone                         ( void )                            const;
    //-------------------------------------------------------------------------------------------------------
    string                    printElement                  ( string            prefix )        const;
    //-------------------------------------------------------------------------------------------------------
    
  private:
    //-------------------------------------------------------------------------------------------------------
    CRect                     m_koef;
};
//---------------------------------------------------------------------------------------------------------------------
                              CInput::CInput                ( int               id,
                                                              const CRect     & relPos,
                                                              const string    & value )
                              : CElement ( id, value, relPos),
                                m_koef   ( relPos )
{
}
//---------------------------------------------------------------------------------------------------------------------
void                          CInput::SetValue              ( const string    & value )
{
  m_title = value;
}
//---------------------------------------------------------------------------------------------------------------------
string                        CInput::GetValue              ( void )
{
  return m_title;
}
//---------------------------------------------------------------------------------------------------------------------
CElement                    * CInput::Search                ( int               id )            const
{
  return nullptr;
}
//---------------------------------------------------------------------------------------------------------------------
void                          CInput::SetPosition           ( const CRect     & newPos )
{
  m_pos = newPos;
}
//---------------------------------------------------------------------------------------------------------------------
CRect                         CInput::getKoef               ( void )                            const
{
  return m_koef;
}
//---------------------------------------------------------------------------------------------------------------------
CInput                      * CInput::clone                 ( void )                            const
{
  return new CInput(*this);
}   
//---------------------------------------------------------------------------------------------------------------------      
string                        CInput::printElement          ( string            prefix )        const
{
  ostringstream oss;

  oss << "[" << m_id << "] Input \"" << m_title << "\" " << m_pos << '\n';

  return oss.str();
} 
//=====================================================================================================================
class CLabel : public CElement 
{
  public:
    //-------------------------------------------------------------------------------------------------------
                              CLabel                        ( int               id,
                                                              const CRect     & relPos,
                                                              const string    & label );
    //-------------------------------------------------------------------------------------------------------
    CElement                * Search                        ( int               id )            const;
    //-------------------------------------------------------------------------------------------------------
    void                      SetPosition                   ( const CRect     & newPos );
    //-------------------------------------------------------------------------------------------------------
    CRect                     getKoef                       ( void )                            const;
    //-------------------------------------------------------------------------------------------------------
    CLabel                  * clone                         ( void )                            const;
    //-------------------------------------------------------------------------------------------------------
    string                    printElement                  ( string            prefix )        const;
    //-------------------------------------------------------------------------------------------------------
    
  private:
    //-------------------------------------------------------------------------------------------------------
    CRect                     m_koef;
};
//---------------------------------------------------------------------------------------------------------------------
                              CLabel::CLabel                ( int               id,
                                                              const CRect     & relPos,
                                                              const string    & label )
                              : CElement ( id, label, relPos ),
                                m_koef   ( relPos )
{
}
//---------------------------------------------------------------------------------------------------------------------
CElement                    * CLabel::Search                ( int               id )            const
{
  return nullptr;
}
//---------------------------------------------------------------------------------------------------------------------
void                          CLabel::SetPosition           ( const CRect     & newPos )
{
  m_pos = newPos;
}
//---------------------------------------------------------------------------------------------------------------------
CRect                         CLabel::getKoef               ( void )                            const
{
  return m_koef;
}
//---------------------------------------------------------------------------------------------------------------------
CLabel                      * CLabel::clone                 ( void )                            const
{
  return new CLabel(*this);  
}
//---------------------------------------------------------------------------------------------------------------------      
string                        CLabel::printElement          ( string            prefix )        const
{
  ostringstream oss;

  oss << "[" << m_id << "] Label \"" << m_title << "\" " << m_pos << '\n';

  return oss.str();
} 
//=====================================================================================================================
class CComboBox : public CElement 
{
  public:
    //-------------------------------------------------------------------------------------------------------
                              CComboBox                     ( int               id,
                                                              const CRect     & relPos );
    //-------------------------------------------------------------------------------------------------------
    CComboBox               & Add                           ( const string    & title );
    //-------------------------------------------------------------------------------------------------------
    void                      SetSelected                   ( unsigned          selected );
    //-------------------------------------------------------------------------------------------------------
    unsigned                  GetSelected                   ( void )                            const;
    //-------------------------------------------------------------------------------------------------------
    CElement                * Search                        ( int               id )            const;
    //-------------------------------------------------------------------------------------------------------
    void                      SetPosition                   ( const CRect     & newPos );
    //-------------------------------------------------------------------------------------------------------
    CRect                     getKoef                       ( void )                            const;
    //-------------------------------------------------------------------------------------------------------
    CComboBox               * clone                         ( void )                            const;
    //-------------------------------------------------------------------------------------------------------
    string                    printElement                  ( string            prefix )        const;
    //-------------------------------------------------------------------------------------------------------

  private:
    //-------------------------------------------------------------------------------------------------------
    CRect                     m_koef;
    unsigned                  m_selected;
    vector<string>            m_vector_title;
};
//---------------------------------------------------------------------------------------------------------------------
                              CComboBox::CComboBox          ( int               id,
                                                              const CRect     & relPos )
                                                              
                              : CElement ( id, "ComboBox", relPos ),
                                m_koef   ( relPos )
{ 
  m_selected = 0;
}
//---------------------------------------------------------------------------------------------------------------------
CComboBox                   & CComboBox::Add                ( const string    & title )
{
  m_vector_title.push_back(title);

  return *this;
}
//---------------------------------------------------------------------------------------------------------------------
void                          CComboBox::SetSelected        ( unsigned          selected )
{
  m_selected = selected;
}
//---------------------------------------------------------------------------------------------------------------------
unsigned                      CComboBox::GetSelected        ( void )                            const
{
  return m_selected;
}
//---------------------------------------------------------------------------------------------------------------------
CElement                    * CComboBox::Search             ( int               id )            const
{   
  return nullptr;
}
//---------------------------------------------------------------------------------------------------------------------
void                          CComboBox::SetPosition        ( const CRect     & newPos )
{
  m_pos = newPos;
}
//---------------------------------------------------------------------------------------------------------------------
CRect                         CComboBox::getKoef            ( void )                            const
{
  return m_koef;
}
//---------------------------------------------------------------------------------------------------------------------
CComboBox                   * CComboBox::clone              ( void )                            const
{
  return new CComboBox(*this);
}
//---------------------------------------------------------------------------------------------------------------------      
string                        CComboBox::printElement       ( string            prefix )        const
{
  ostringstream oss;

  oss << "[" << m_id << "] " << m_title << ' ' << m_pos << '\n';

  for (unsigned i = 0; i < m_vector_title.size(); i++) {
    oss << prefix << "+-";
    (i == m_selected) ? oss << '>' << m_vector_title[i] << "<\n" : oss << ' ' << m_vector_title[i] << '\n';
  }

  return oss.str();
}
//=====================================================================================================================
#ifndef __PROGTEST__
template <typename _T>
string                        toString                      ( const _T & x )
{
  ostringstream oss;
  oss << x;
  return oss . str ();
}
//=====================================================================================================================
int                           main                          ( void )
{
  assert ( sizeof ( CButton ) - sizeof ( string ) < sizeof ( CComboBox ) - sizeof ( vector<string> ) );
  assert ( sizeof ( CInput ) - sizeof ( string ) < sizeof ( CComboBox ) - sizeof ( vector<string> ) );
  assert ( sizeof ( CLabel ) - sizeof ( string ) < sizeof ( CComboBox ) - sizeof ( vector<string> ) );
  assert ( sizeof ( CButton ) - sizeof ( string ) <= sizeof ( CPanel ) - sizeof ( vector<void*> ) );
  assert ( sizeof ( CInput ) - sizeof ( string ) <= sizeof ( CPanel ) - sizeof ( vector<void*> ) );
  assert ( sizeof ( CLabel ) - sizeof ( string ) <= sizeof ( CPanel ) - sizeof ( vector<void*> ) );
  
  CWindow a ( "Sample window", CRect ( 10, 10, 600, 480 ) );
  a . Add ( CButton ( 1, CRect ( 0.1, 0.8, 0.3, 0.1 ), "Ok" ) ) . Add ( CButton ( 2, CRect ( 0.6, 0.8, 0.3, 0.1 ), "Cancel" ) );
  a . Add ( CLabel ( 10, CRect ( 0.1, 0.1, 0.2, 0.1 ), "Username:" ) );
  a . Add ( CInput ( 11, CRect ( 0.4, 0.1, 0.5, 0.1 ), "chucknorris" ) );
  a . Add ( CPanel ( 12, CRect ( 0.1, 0.3, 0.8, 0.7 ) ) . Add ( CComboBox ( 20, CRect ( 0.1, 0.3, 0.8, 0.1 ) ) . Add ( "Karate" ) . Add ( "Judo" ) . Add ( "Box" ) . Add ( "Progtest" ) ) );
  
  assert ( toString ( a ) ==
    "Window \"Sample window\" (10,10,600,480)\n"
    "+- [1] Button \"Ok\" (70,394,180,48)\n"
    "+- [2] Button \"Cancel\" (370,394,180,48)\n"
    "+- [10] Label \"Username:\" (70,58,120,48)\n"
    "+- [11] Input \"chucknorris\" (250,58,300,48)\n"
    "+- [12] Panel (70,154,480,336)\n"
    "   +- [20] ComboBox (118,254.8,384,33.6)\n"
    "      +->Karate<\n"
    "      +- Judo\n"
    "      +- Box\n"
    "      +- Progtest\n" );

  CWindow b = a;
  assert ( toString ( *b . Search ( 20 ) ) ==
    "[20] ComboBox (118,254.8,384,33.6)\n"
    "+->Karate<\n"
    "+- Judo\n"
    "+- Box\n"
    "+- Progtest\n" );

  assert ( dynamic_cast<CComboBox &> ( *b . Search ( 20 ) ) . GetSelected () == 0 );
  dynamic_cast<CComboBox &> ( *b . Search ( 20 ) ) . SetSelected ( 3 );
  assert ( dynamic_cast<CInput &> ( *b . Search ( 11 ) ) . GetValue () == "chucknorris" );
  dynamic_cast<CInput &> ( *b . Search ( 11 ) ) . SetValue ( "chucknorris@fit.cvut.cz" );
  CPanel & p = dynamic_cast<CPanel &> ( *b . Search ( 12 ) );
  p . Add ( CComboBox ( 21, CRect ( 0.1, 0.5, 0.8, 0.1 ) ) . Add ( "PA2" ) . Add ( "OSY" ) . Add ( "Both" ) );

  assert ( toString ( b ) ==
    "Window \"Sample window\" (10,10,600,480)\n"
    "+- [1] Button \"Ok\" (70,394,180,48)\n"
    "+- [2] Button \"Cancel\" (370,394,180,48)\n"
    "+- [10] Label \"Username:\" (70,58,120,48)\n"
    "+- [11] Input \"chucknorris@fit.cvut.cz\" (250,58,300,48)\n"
    "+- [12] Panel (70,154,480,336)\n"
    "   +- [20] ComboBox (118,254.8,384,33.6)\n"
    "   |  +- Karate\n"
    "   |  +- Judo\n"
    "   |  +- Box\n"
    "   |  +->Progtest<\n"
    "   +- [21] ComboBox (118,322,384,33.6)\n"
    "      +->PA2<\n"
    "      +- OSY\n"
    "      +- Both\n" );

  assert ( toString ( a ) ==
    "Window \"Sample window\" (10,10,600,480)\n"
    "+- [1] Button \"Ok\" (70,394,180,48)\n"
    "+- [2] Button \"Cancel\" (370,394,180,48)\n"
    "+- [10] Label \"Username:\" (70,58,120,48)\n"
    "+- [11] Input \"chucknorris\" (250,58,300,48)\n"
    "+- [12] Panel (70,154,480,336)\n"
    "   +- [20] ComboBox (118,254.8,384,33.6)\n"
    "      +->Karate<\n"
    "      +- Judo\n"
    "      +- Box\n"
    "      +- Progtest\n" );

  assert ( toString ( p ) ==
    "[12] Panel (70,154,480,336)\n"
    "+- [20] ComboBox (118,254.8,384,33.6)\n"
    "|  +- Karate\n"
    "|  +- Judo\n"
    "|  +- Box\n"
    "|  +->Progtest<\n"
    "+- [21] ComboBox (118,322,384,33.6)\n"
    "   +->PA2<\n"
    "   +- OSY\n"
    "   +- Both\n" );
    
  b . SetPosition ( CRect ( 20, 30, 640, 520 ) );
  assert ( toString ( b ) ==
    "Window \"Sample window\" (20,30,640,520)\n"
    "+- [1] Button \"Ok\" (84,446,192,52)\n"
    "+- [2] Button \"Cancel\" (404,446,192,52)\n"
    "+- [10] Label \"Username:\" (84,82,128,52)\n"
    "+- [11] Input \"chucknorris@fit.cvut.cz\" (276,82,320,52)\n"
    "+- [12] Panel (84,186,512,364)\n"
    "   +- [20] ComboBox (135.2,295.2,409.6,36.4)\n"
    "   |  +- Karate\n"
    "   |  +- Judo\n"
    "   |  +- Box\n"
    "   |  +->Progtest<\n"
    "   +- [21] ComboBox (135.2,368,409.6,36.4)\n"
    "      +->PA2<\n"
    "      +- OSY\n"
    "      +- Both\n" );

  p . Add ( p );
  assert ( toString ( p ) ==
    "[12] Panel (84,186,512,364)\n"
    "+- [20] ComboBox (135.2,295.2,409.6,36.4)\n"
    "|  +- Karate\n"
    "|  +- Judo\n"
    "|  +- Box\n"
    "|  +->Progtest<\n"
    "+- [21] ComboBox (135.2,368,409.6,36.4)\n"
    "|  +->PA2<\n"
    "|  +- OSY\n"
    "|  +- Both\n"
    "+- [12] Panel (135.2,295.2,409.6,254.8)\n"
    "   +- [20] ComboBox (176.16,371.64,327.68,25.48)\n"
    "   |  +- Karate\n"
    "   |  +- Judo\n"
    "   |  +- Box\n"
    "   |  +->Progtest<\n"
    "   +- [21] ComboBox (176.16,422.6,327.68,25.48)\n"
    "      +->PA2<\n"
    "      +- OSY\n"
    "      +- Both\n" );
  p . Add ( p );

  assert ( toString ( p ) ==
    "[12] Panel (84,186,512,364)\n"
    "+- [20] ComboBox (135.2,295.2,409.6,36.4)\n"
    "|  +- Karate\n"
    "|  +- Judo\n"
    "|  +- Box\n"
    "|  +->Progtest<\n"
    "+- [21] ComboBox (135.2,368,409.6,36.4)\n"
    "|  +->PA2<\n"
    "|  +- OSY\n"
    "|  +- Both\n"
    "+- [12] Panel (135.2,295.2,409.6,254.8)\n"
    "|  +- [20] ComboBox (176.16,371.64,327.68,25.48)\n"
    "|  |  +- Karate\n"
    "|  |  +- Judo\n"
    "|  |  +- Box\n"
    "|  |  +->Progtest<\n"
    "|  +- [21] ComboBox (176.16,422.6,327.68,25.48)\n"
    "|     +->PA2<\n"
    "|     +- OSY\n"
    "|     +- Both\n"
    "+- [12] Panel (135.2,295.2,409.6,254.8)\n"
    "   +- [20] ComboBox (176.16,371.64,327.68,25.48)\n"
    "   |  +- Karate\n"
    "   |  +- Judo\n"
    "   |  +- Box\n"
    "   |  +->Progtest<\n"
    "   +- [21] ComboBox (176.16,422.6,327.68,25.48)\n"
    "   |  +->PA2<\n"
    "   |  +- OSY\n"
    "   |  +- Both\n"
    "   +- [12] Panel (176.16,371.64,327.68,178.36)\n"
    "      +- [20] ComboBox (208.928,425.148,262.144,17.836)\n"
    "      |  +- Karate\n"
    "      |  +- Judo\n"
    "      |  +- Box\n"
    "      |  +->Progtest<\n"
    "      +- [21] ComboBox (208.928,460.82,262.144,17.836)\n"
    "         +->PA2<\n"
    "         +- OSY\n"
    "         +- Both\n" );
    
  p . Add ( p );
  assert ( toString ( p ) ==
    "[12] Panel (84,186,512,364)\n"
    "+- [20] ComboBox (135.2,295.2,409.6,36.4)\n"
    "|  +- Karate\n"
    "|  +- Judo\n"
    "|  +- Box\n"
    "|  +->Progtest<\n"
    "+- [21] ComboBox (135.2,368,409.6,36.4)\n"
    "|  +->PA2<\n"
    "|  +- OSY\n"
    "|  +- Both\n"
    "+- [12] Panel (135.2,295.2,409.6,254.8)\n"
    "|  +- [20] ComboBox (176.16,371.64,327.68,25.48)\n"
    "|  |  +- Karate\n"
    "|  |  +- Judo\n"
    "|  |  +- Box\n"
    "|  |  +->Progtest<\n"
    "|  +- [21] ComboBox (176.16,422.6,327.68,25.48)\n"
    "|     +->PA2<\n"
    "|     +- OSY\n"
    "|     +- Both\n"
    "+- [12] Panel (135.2,295.2,409.6,254.8)\n"
    "|  +- [20] ComboBox (176.16,371.64,327.68,25.48)\n"
    "|  |  +- Karate\n"
    "|  |  +- Judo\n"
    "|  |  +- Box\n"
    "|  |  +->Progtest<\n"
    "|  +- [21] ComboBox (176.16,422.6,327.68,25.48)\n"
    "|  |  +->PA2<\n"
    "|  |  +- OSY\n"
    "|  |  +- Both\n"
    "|  +- [12] Panel (176.16,371.64,327.68,178.36)\n"
    "|     +- [20] ComboBox (208.928,425.148,262.144,17.836)\n"
    "|     |  +- Karate\n"
    "|     |  +- Judo\n"
    "|     |  +- Box\n"
    "|     |  +->Progtest<\n"
    "|     +- [21] ComboBox (208.928,460.82,262.144,17.836)\n"
    "|        +->PA2<\n"
    "|        +- OSY\n"
    "|        +- Both\n"
    "+- [12] Panel (135.2,295.2,409.6,254.8)\n"
    "   +- [20] ComboBox (176.16,371.64,327.68,25.48)\n"
    "   |  +- Karate\n"
    "   |  +- Judo\n"
    "   |  +- Box\n"
    "   |  +->Progtest<\n"
    "   +- [21] ComboBox (176.16,422.6,327.68,25.48)\n"
    "   |  +->PA2<\n"
    "   |  +- OSY\n"
    "   |  +- Both\n"
    "   +- [12] Panel (176.16,371.64,327.68,178.36)\n"
    "   |  +- [20] ComboBox (208.928,425.148,262.144,17.836)\n"
    "   |  |  +- Karate\n"
    "   |  |  +- Judo\n"
    "   |  |  +- Box\n"
    "   |  |  +->Progtest<\n"
    "   |  +- [21] ComboBox (208.928,460.82,262.144,17.836)\n"
    "   |     +->PA2<\n"
    "   |     +- OSY\n"
    "   |     +- Both\n"
    "   +- [12] Panel (176.16,371.64,327.68,178.36)\n"
    "      +- [20] ComboBox (208.928,425.148,262.144,17.836)\n"
    "      |  +- Karate\n"
    "      |  +- Judo\n"
    "      |  +- Box\n"
    "      |  +->Progtest<\n"
    "      +- [21] ComboBox (208.928,460.82,262.144,17.836)\n"
    "      |  +->PA2<\n"
    "      |  +- OSY\n"
    "      |  +- Both\n"
    "      +- [12] Panel (208.928,425.148,262.144,124.852)\n"
    "         +- [20] ComboBox (235.142,462.604,209.715,12.4852)\n"
    "         |  +- Karate\n"
    "         |  +- Judo\n"
    "         |  +- Box\n"
    "         |  +->Progtest<\n"
    "         +- [21] ComboBox (235.142,487.574,209.715,12.4852)\n"
    "            +->PA2<\n"
    "            +- OSY\n"
    "            +- Both\n" );
  assert ( toString ( b ) ==
    "Window \"Sample window\" (20,30,640,520)\n"
    "+- [1] Button \"Ok\" (84,446,192,52)\n"
    "+- [2] Button \"Cancel\" (404,446,192,52)\n"
    "+- [10] Label \"Username:\" (84,82,128,52)\n"
    "+- [11] Input \"chucknorris@fit.cvut.cz\" (276,82,320,52)\n"
    "+- [12] Panel (84,186,512,364)\n"
    "   +- [20] ComboBox (135.2,295.2,409.6,36.4)\n"
    "   |  +- Karate\n"
    "   |  +- Judo\n"
    "   |  +- Box\n"
    "   |  +->Progtest<\n"
    "   +- [21] ComboBox (135.2,368,409.6,36.4)\n"
    "   |  +->PA2<\n"
    "   |  +- OSY\n"
    "   |  +- Both\n"
    "   +- [12] Panel (135.2,295.2,409.6,254.8)\n"
    "   |  +- [20] ComboBox (176.16,371.64,327.68,25.48)\n"
    "   |  |  +- Karate\n"
    "   |  |  +- Judo\n"
    "   |  |  +- Box\n"
    "   |  |  +->Progtest<\n"
    "   |  +- [21] ComboBox (176.16,422.6,327.68,25.48)\n"
    "   |     +->PA2<\n"
    "   |     +- OSY\n"
    "   |     +- Both\n"
    "   +- [12] Panel (135.2,295.2,409.6,254.8)\n"
    "   |  +- [20] ComboBox (176.16,371.64,327.68,25.48)\n"
    "   |  |  +- Karate\n"
    "   |  |  +- Judo\n"
    "   |  |  +- Box\n"
    "   |  |  +->Progtest<\n"
    "   |  +- [21] ComboBox (176.16,422.6,327.68,25.48)\n"
    "   |  |  +->PA2<\n"
    "   |  |  +- OSY\n"
    "   |  |  +- Both\n"
    "   |  +- [12] Panel (176.16,371.64,327.68,178.36)\n"
    "   |     +- [20] ComboBox (208.928,425.148,262.144,17.836)\n"
    "   |     |  +- Karate\n"
    "   |     |  +- Judo\n"
    "   |     |  +- Box\n"
    "   |     |  +->Progtest<\n"
    "   |     +- [21] ComboBox (208.928,460.82,262.144,17.836)\n"
    "   |        +->PA2<\n"
    "   |        +- OSY\n"
    "   |        +- Both\n"
    "   +- [12] Panel (135.2,295.2,409.6,254.8)\n"
    "      +- [20] ComboBox (176.16,371.64,327.68,25.48)\n"
    "      |  +- Karate\n"
    "      |  +- Judo\n"
    "      |  +- Box\n"
    "      |  +->Progtest<\n"
    "      +- [21] ComboBox (176.16,422.6,327.68,25.48)\n"
    "      |  +->PA2<\n"
    "      |  +- OSY\n"
    "      |  +- Both\n"
    "      +- [12] Panel (176.16,371.64,327.68,178.36)\n"
    "      |  +- [20] ComboBox (208.928,425.148,262.144,17.836)\n"
    "      |  |  +- Karate\n"
    "      |  |  +- Judo\n"
    "      |  |  +- Box\n"
    "      |  |  +->Progtest<\n"
    "      |  +- [21] ComboBox (208.928,460.82,262.144,17.836)\n"
    "      |     +->PA2<\n"
    "      |     +- OSY\n"
    "      |     +- Both\n"
    "      +- [12] Panel (176.16,371.64,327.68,178.36)\n"
    "         +- [20] ComboBox (208.928,425.148,262.144,17.836)\n"
    "         |  +- Karate\n"
    "         |  +- Judo\n"
    "         |  +- Box\n"
    "         |  +->Progtest<\n"
    "         +- [21] ComboBox (208.928,460.82,262.144,17.836)\n"
    "         |  +->PA2<\n"
    "         |  +- OSY\n"
    "         |  +- Both\n"
    "         +- [12] Panel (208.928,425.148,262.144,124.852)\n"
    "            +- [20] ComboBox (235.142,462.604,209.715,12.4852)\n"
    "            |  +- Karate\n"
    "            |  +- Judo\n"
    "            |  +- Box\n"
    "            |  +->Progtest<\n"
    "            +- [21] ComboBox (235.142,487.574,209.715,12.4852)\n"
    "               +->PA2<\n"
    "               +- OSY\n"
    "               +- Both\n" );
  assert ( toString ( a ) ==
    "Window \"Sample window\" (10,10,600,480)\n"
    "+- [1] Button \"Ok\" (70,394,180,48)\n"
    "+- [2] Button \"Cancel\" (370,394,180,48)\n"
    "+- [10] Label \"Username:\" (70,58,120,48)\n"
    "+- [11] Input \"chucknorris\" (250,58,300,48)\n"
    "+- [12] Panel (70,154,480,336)\n"
    "   +- [20] ComboBox (118,254.8,384,33.6)\n"
    "      +->Karate<\n"
    "      +- Judo\n"
    "      +- Box\n"
    "      +- Progtest\n" );
  return 0;
}
#endif /* __PROGTEST__ */
